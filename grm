#! /bin/sh

## Settings
RepositoryDirectory="/src"
Dmenu="dmenu"
DmenuFlags=""
CacheTimeout=60
CacheDirectory="${XDG_CACHE_HOME-$HOME/.cache}/grm"
Config="${XDG_CONFIG_HOME-$HOME/.config}/grm/config.sh"
Editor="${EDITOR:-nano}"

# Load config if present ( will override, settings above )
[ -f "$Config" ] && source $Config

## Script

updateCache(){
	mkdir -p "$CacheDirectory"
	# if cache has passed it's timeout nor exists, or passed true, then create/update it
	find "$CacheDirectory/repos" -mmin "+$CacheTimeout" 2> /dev/null || [ "$1" = true ] && \
	find "$RepositoryDirectory" -name .git -print0 | \
	xargs -0 dirname > "$CacheDirectory/repos"
}

case $1 in
	pick) 
		"$Dmenu" $DmenuFlags < "$CacheDirectory/repos"
		;;
	clone) # grm clone <URL> TODO check if url is given, otherwise print help
		TempDir="$CacheDirectory/repo"
		mkdir -p "$TempDir"
		if git -C "$TempDir" clone "$2"; then
			# extract info from url
			Info=$(echo "$2" | sed -r "s|https?://(.*)/(.*)\.git|\1 \2|")
			RepoPath=$(echo "$RepositoryDirectory/$Info" | cut -sd ' ' -f 1)
			# make target directory structure
			mkdir -p "$RepoPath"
			# move repo to target destination
			mv "$TempDir/$(echo "$Info" | cut -sd ' ' -f 2)"  "$RepoPath"
		fi
		updateCache
		;;
	delete) 
		Repo=$("$Dmenu" $DmenuFlags < "$CacheDirectory/repos")
		rm -R "$Repo"
		# recursivly rm all empty dir included in repos path
		cd "$RepositoryDirectory" || exit
		while [ "$Repo" != "." ]; do
			rm -Rd "$Repo"
			Repo=$(dirname "$Repo")
		done
		updateCache
		;;
	configure)
		# open this file in users EDITOR
		$Editor "$0"
		# Update after edit
		updateCache true
		;;
	query)
		updateCache true
		;;
	version)
		# TODO print version and licence
		;;
	help|*)
		# print help/usage
esac
